// megafunction wizard: %LPM_MUX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_MUX 

// ============================================================
// File Name: muxer1.v
// Megafunction Name(s):
// 			LPM_MUX
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.0.1 Build 232 06/12/2013 SP 1 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2013 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//lpm_mux DEVICE_FAMILY="Stratix V" LPM_PIPELINE=1 LPM_SIZE=2 LPM_WIDTH=64 LPM_WIDTHS=1 clock data result sel
//VERSION_BEGIN 13.0 cbx_lpm_mux 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = lut 22 reg 64 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  muxer1_mux
	( 
	clock,
	data,
	result,
	sel) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [127:0]  data;
	output   [63:0]  result;
	input   [0:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri0   [127:0]  data;
	tri0   [0:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[63:0]	external_reg;
	wire	wire_l1_w0_n0_mux_dataout;
	wire	wire_l1_w10_n0_mux_dataout;
	wire	wire_l1_w11_n0_mux_dataout;
	wire	wire_l1_w12_n0_mux_dataout;
	wire	wire_l1_w13_n0_mux_dataout;
	wire	wire_l1_w14_n0_mux_dataout;
	wire	wire_l1_w15_n0_mux_dataout;
	wire	wire_l1_w16_n0_mux_dataout;
	wire	wire_l1_w17_n0_mux_dataout;
	wire	wire_l1_w18_n0_mux_dataout;
	wire	wire_l1_w19_n0_mux_dataout;
	wire	wire_l1_w1_n0_mux_dataout;
	wire	wire_l1_w20_n0_mux_dataout;
	wire	wire_l1_w21_n0_mux_dataout;
	wire	wire_l1_w22_n0_mux_dataout;
	wire	wire_l1_w23_n0_mux_dataout;
	wire	wire_l1_w24_n0_mux_dataout;
	wire	wire_l1_w25_n0_mux_dataout;
	wire	wire_l1_w26_n0_mux_dataout;
	wire	wire_l1_w27_n0_mux_dataout;
	wire	wire_l1_w28_n0_mux_dataout;
	wire	wire_l1_w29_n0_mux_dataout;
	wire	wire_l1_w2_n0_mux_dataout;
	wire	wire_l1_w30_n0_mux_dataout;
	wire	wire_l1_w31_n0_mux_dataout;
	wire	wire_l1_w32_n0_mux_dataout;
	wire	wire_l1_w33_n0_mux_dataout;
	wire	wire_l1_w34_n0_mux_dataout;
	wire	wire_l1_w35_n0_mux_dataout;
	wire	wire_l1_w36_n0_mux_dataout;
	wire	wire_l1_w37_n0_mux_dataout;
	wire	wire_l1_w38_n0_mux_dataout;
	wire	wire_l1_w39_n0_mux_dataout;
	wire	wire_l1_w3_n0_mux_dataout;
	wire	wire_l1_w40_n0_mux_dataout;
	wire	wire_l1_w41_n0_mux_dataout;
	wire	wire_l1_w42_n0_mux_dataout;
	wire	wire_l1_w43_n0_mux_dataout;
	wire	wire_l1_w44_n0_mux_dataout;
	wire	wire_l1_w45_n0_mux_dataout;
	wire	wire_l1_w46_n0_mux_dataout;
	wire	wire_l1_w47_n0_mux_dataout;
	wire	wire_l1_w48_n0_mux_dataout;
	wire	wire_l1_w49_n0_mux_dataout;
	wire	wire_l1_w4_n0_mux_dataout;
	wire	wire_l1_w50_n0_mux_dataout;
	wire	wire_l1_w51_n0_mux_dataout;
	wire	wire_l1_w52_n0_mux_dataout;
	wire	wire_l1_w53_n0_mux_dataout;
	wire	wire_l1_w54_n0_mux_dataout;
	wire	wire_l1_w55_n0_mux_dataout;
	wire	wire_l1_w56_n0_mux_dataout;
	wire	wire_l1_w57_n0_mux_dataout;
	wire	wire_l1_w58_n0_mux_dataout;
	wire	wire_l1_w59_n0_mux_dataout;
	wire	wire_l1_w5_n0_mux_dataout;
	wire	wire_l1_w60_n0_mux_dataout;
	wire	wire_l1_w61_n0_mux_dataout;
	wire	wire_l1_w62_n0_mux_dataout;
	wire	wire_l1_w63_n0_mux_dataout;
	wire	wire_l1_w6_n0_mux_dataout;
	wire	wire_l1_w7_n0_mux_dataout;
	wire	wire_l1_w8_n0_mux_dataout;
	wire	wire_l1_w9_n0_mux_dataout;
	wire  [127:0]  data_wire;
	wire  [63:0]  result_wire_ext;
	wire  [0:0]  sel_wire;

	// synopsys translate_off
	initial
		external_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		  external_reg <= result_wire_ext;
	assign		wire_l1_w0_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[64] : data_wire[0];
	assign		wire_l1_w10_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[74] : data_wire[10];
	assign		wire_l1_w11_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[75] : data_wire[11];
	assign		wire_l1_w12_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[76] : data_wire[12];
	assign		wire_l1_w13_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[77] : data_wire[13];
	assign		wire_l1_w14_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[78] : data_wire[14];
	assign		wire_l1_w15_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[79] : data_wire[15];
	assign		wire_l1_w16_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[80] : data_wire[16];
	assign		wire_l1_w17_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[81] : data_wire[17];
	assign		wire_l1_w18_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[82] : data_wire[18];
	assign		wire_l1_w19_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[83] : data_wire[19];
	assign		wire_l1_w1_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[65] : data_wire[1];
	assign		wire_l1_w20_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[84] : data_wire[20];
	assign		wire_l1_w21_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[85] : data_wire[21];
	assign		wire_l1_w22_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[86] : data_wire[22];
	assign		wire_l1_w23_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[87] : data_wire[23];
	assign		wire_l1_w24_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[88] : data_wire[24];
	assign		wire_l1_w25_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[89] : data_wire[25];
	assign		wire_l1_w26_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[90] : data_wire[26];
	assign		wire_l1_w27_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[91] : data_wire[27];
	assign		wire_l1_w28_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[92] : data_wire[28];
	assign		wire_l1_w29_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[93] : data_wire[29];
	assign		wire_l1_w2_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[66] : data_wire[2];
	assign		wire_l1_w30_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[94] : data_wire[30];
	assign		wire_l1_w31_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[95] : data_wire[31];
	assign		wire_l1_w32_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[96] : data_wire[32];
	assign		wire_l1_w33_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[97] : data_wire[33];
	assign		wire_l1_w34_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[98] : data_wire[34];
	assign		wire_l1_w35_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[99] : data_wire[35];
	assign		wire_l1_w36_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[100] : data_wire[36];
	assign		wire_l1_w37_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[101] : data_wire[37];
	assign		wire_l1_w38_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[102] : data_wire[38];
	assign		wire_l1_w39_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[103] : data_wire[39];
	assign		wire_l1_w3_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[67] : data_wire[3];
	assign		wire_l1_w40_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[104] : data_wire[40];
	assign		wire_l1_w41_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[105] : data_wire[41];
	assign		wire_l1_w42_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[106] : data_wire[42];
	assign		wire_l1_w43_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[107] : data_wire[43];
	assign		wire_l1_w44_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[108] : data_wire[44];
	assign		wire_l1_w45_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[109] : data_wire[45];
	assign		wire_l1_w46_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[110] : data_wire[46];
	assign		wire_l1_w47_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[111] : data_wire[47];
	assign		wire_l1_w48_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[112] : data_wire[48];
	assign		wire_l1_w49_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[113] : data_wire[49];
	assign		wire_l1_w4_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[68] : data_wire[4];
	assign		wire_l1_w50_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[114] : data_wire[50];
	assign		wire_l1_w51_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[115] : data_wire[51];
	assign		wire_l1_w52_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[116] : data_wire[52];
	assign		wire_l1_w53_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[117] : data_wire[53];
	assign		wire_l1_w54_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[118] : data_wire[54];
	assign		wire_l1_w55_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[119] : data_wire[55];
	assign		wire_l1_w56_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[120] : data_wire[56];
	assign		wire_l1_w57_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[121] : data_wire[57];
	assign		wire_l1_w58_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[122] : data_wire[58];
	assign		wire_l1_w59_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[123] : data_wire[59];
	assign		wire_l1_w5_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[69] : data_wire[5];
	assign		wire_l1_w60_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[124] : data_wire[60];
	assign		wire_l1_w61_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[125] : data_wire[61];
	assign		wire_l1_w62_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[126] : data_wire[62];
	assign		wire_l1_w63_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[127] : data_wire[63];
	assign		wire_l1_w6_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[70] : data_wire[6];
	assign		wire_l1_w7_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[71] : data_wire[7];
	assign		wire_l1_w8_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[72] : data_wire[8];
	assign		wire_l1_w9_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[73] : data_wire[9];
	assign
		data_wire = {data},
		result = external_reg,
		result_wire_ext = {wire_l1_w63_n0_mux_dataout, wire_l1_w62_n0_mux_dataout, wire_l1_w61_n0_mux_dataout, wire_l1_w60_n0_mux_dataout, wire_l1_w59_n0_mux_dataout, wire_l1_w58_n0_mux_dataout, wire_l1_w57_n0_mux_dataout, wire_l1_w56_n0_mux_dataout, wire_l1_w55_n0_mux_dataout, wire_l1_w54_n0_mux_dataout, wire_l1_w53_n0_mux_dataout, wire_l1_w52_n0_mux_dataout, wire_l1_w51_n0_mux_dataout, wire_l1_w50_n0_mux_dataout, wire_l1_w49_n0_mux_dataout, wire_l1_w48_n0_mux_dataout, wire_l1_w47_n0_mux_dataout, wire_l1_w46_n0_mux_dataout, wire_l1_w45_n0_mux_dataout, wire_l1_w44_n0_mux_dataout, wire_l1_w43_n0_mux_dataout, wire_l1_w42_n0_mux_dataout, wire_l1_w41_n0_mux_dataout, wire_l1_w40_n0_mux_dataout, wire_l1_w39_n0_mux_dataout, wire_l1_w38_n0_mux_dataout, wire_l1_w37_n0_mux_dataout, wire_l1_w36_n0_mux_dataout, wire_l1_w35_n0_mux_dataout, wire_l1_w34_n0_mux_dataout, wire_l1_w33_n0_mux_dataout, wire_l1_w32_n0_mux_dataout, wire_l1_w31_n0_mux_dataout, wire_l1_w30_n0_mux_dataout, wire_l1_w29_n0_mux_dataout, wire_l1_w28_n0_mux_dataout, wire_l1_w27_n0_mux_dataout, wire_l1_w26_n0_mux_dataout, wire_l1_w25_n0_mux_dataout, wire_l1_w24_n0_mux_dataout, wire_l1_w23_n0_mux_dataout, wire_l1_w22_n0_mux_dataout, wire_l1_w21_n0_mux_dataout, wire_l1_w20_n0_mux_dataout, wire_l1_w19_n0_mux_dataout, wire_l1_w18_n0_mux_dataout, wire_l1_w17_n0_mux_dataout, wire_l1_w16_n0_mux_dataout, wire_l1_w15_n0_mux_dataout, wire_l1_w14_n0_mux_dataout, wire_l1_w13_n0_mux_dataout, wire_l1_w12_n0_mux_dataout, wire_l1_w11_n0_mux_dataout, wire_l1_w10_n0_mux_dataout, wire_l1_w9_n0_mux_dataout, wire_l1_w8_n0_mux_dataout, wire_l1_w7_n0_mux_dataout, wire_l1_w6_n0_mux_dataout, wire_l1_w5_n0_mux_dataout, wire_l1_w4_n0_mux_dataout, wire_l1_w3_n0_mux_dataout, wire_l1_w2_n0_mux_dataout, wire_l1_w1_n0_mux_dataout, wire_l1_w0_n0_mux_dataout},
		sel_wire = {sel[0]};
endmodule //muxer1_mux
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module muxer1 (
	clock,
	data0x,
	data1x,
	sel,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[63:0]  data0x;
	input	[63:0]  data1x;
	input	  sel;
	output	[63:0]  result;

	wire [63:0] sub_wire0;
	wire [63:0] sub_wire3 = data1x[63:0];
	wire [63:0] result = sub_wire0[63:0];
	wire [63:0] sub_wire1 = data0x[63:0];
	wire [127:0] sub_wire2 = {sub_wire3, sub_wire1};
	wire  sub_wire4 = sel;
	wire  sub_wire5 = sub_wire4;

	muxer1_mux	muxer1_mux_component (
				.clock (clock),
				.data (sub_wire2),
				.sel (sub_wire5),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix V"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "1"
// Retrieval info: CONSTANT: LPM_SIZE NUMERIC "2"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MUX"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "64"
// Retrieval info: CONSTANT: LPM_WIDTHS NUMERIC "1"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: data0x 0 0 64 0 INPUT NODEFVAL "data0x[63..0]"
// Retrieval info: USED_PORT: data1x 0 0 64 0 INPUT NODEFVAL "data1x[63..0]"
// Retrieval info: USED_PORT: result 0 0 64 0 OUTPUT NODEFVAL "result[63..0]"
// Retrieval info: USED_PORT: sel 0 0 0 0 INPUT NODEFVAL "sel"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 64 0 data0x 0 0 64 0
// Retrieval info: CONNECT: @data 0 0 64 64 data1x 0 0 64 0
// Retrieval info: CONNECT: @sel 0 0 1 0 sel 0 0 0 0
// Retrieval info: CONNECT: result 0 0 64 0 @result 0 0 64 0
// Retrieval info: GEN_FILE: TYPE_NORMAL muxer1.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL muxer1.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL muxer1.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL muxer1.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL muxer1_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL muxer1_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL muxer1_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
