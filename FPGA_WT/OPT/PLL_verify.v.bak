`include "H:/altera/11.1/PLL_verify/parameter/global_parameter.v"

module PLL_verify(
						clk,
						sta,
						rst,
						solve_end,
						Va,
						Vb,
						Vc,
						inner_result_1,
						inner_result_2,
						inner_result_3,
						inner_result_4,

						inner_result_5,
						inner_result_6,
						multiplier_inner_result5_multiply_cos1,
						multiplier_inner_result5_multiply_cos2,
						multiplier_inner_result5_multiply_cos3,
						sig1,
						sig2,
						sig3,
						
						inner_result_7,
						inner_result_8,
						multiplier_inner_result7_multiply_sin1,
						multiplier_inner_result7_multiply_sin2,
						multiplier_inner_result7_multiply_sin3,
						sig4,
						sig5,
						sig6,
						inner_result_9,
						inner_result_10,

						inner_result1_PLL1,
						inner_result2_PLL1,
						inner_result3_PLL1,
						inner_result1_PLL2,
						inner_result2_PLL2,
						inner_result3_PLL2,

						x_reg_PLL1,
						x_reg_PLL2,
						y_reg_PLL1,
						y_reg_PLL2,
						
						frequence,
						theta,					
						pi_inv_2_minus_theta,
						sin_cos_theta,
						sin_cos,
						sin,
						cos,
						sin_reg,
						cos_reg,
						sig7,
						sig8,
						sig9,
						sig10
//						multiplier_inner_result6_multiply_sin1,
//						multiplier_inner_result6_multiply_sin2,
//						multiplier_inner_result6_multiply_sin3

					  );
					  
parameter const_2 = 32'h40000000;
parameter const_inv_3 = 32'h3eaaaaab;
parameter const_sqrt_inv_3 = 32'h3F13CD36;
parameter const_inv_2pi = 32'h3E22F944;
parameter const_pi_inv_2 = 32'h3FC90FDB;
					  
input clk;
input sta;
input rst;
input solve_end;
input [`SINGLE - 1:0] Va;
input [`SINGLE - 1:0] Vb;
input [`SINGLE - 1:0] Vc;

output [`SINGLE - 1:0] inner_result_1;
reg [`SINGLE - 1:0] inner_result_1;
output [`SINGLE - 1:0] inner_result_2;
output [`SINGLE - 1:0] inner_result_3;
output [`SINGLE - 1:0] inner_result_4;

output [`SINGLE - 1:0] inner_result_5;
output [`SINGLE - 1:0] inner_result_6;
reg [`SINGLE - 1:0] inner_result_5;
reg [`SINGLE - 1:0] inner_result_6;

output [`SINGLE - 1:0] multiplier_inner_result5_multiply_cos1;
output [`SINGLE - 1:0] multiplier_inner_result5_multiply_cos2;
reg [`SINGLE - 1:0] multiplier_inner_result5_multiply_cos1;
reg [`SINGLE - 1:0] multiplier_inner_result5_multiply_cos2;
output [`SINGLE - 1:0] multiplier_inner_result5_multiply_cos3;

output sig1,sig2,sig3;

output [`SINGLE - 1:0] inner_result_7;
output [`SINGLE - 1:0] inner_result_8;
reg [`SINGLE - 1:0] inner_result_7;
reg [`SINGLE - 1:0] inner_result_8;

output [`SINGLE - 1:0] multiplier_inner_result7_multiply_sin1;
output [`SINGLE - 1:0] multiplier_inner_result7_multiply_sin2;
reg [`SINGLE - 1:0] multiplier_inner_result7_multiply_sin1;
reg [`SINGLE - 1:0] multiplier_inner_result7_multiply_sin2;
output [`SINGLE - 1:0] multiplier_inner_result7_multiply_sin3;

output sig4,sig5,sig6;

output [`SINGLE - 1:0] inner_result_9;
output [`SINGLE - 1:0] inner_result_10;

output [`SINGLE - 1:0] inner_result1_PLL1;
output [`SINGLE - 1:0] inner_result2_PLL1;
output [`SINGLE - 1:0] inner_result3_PLL1;
output [`SINGLE - 1:0] inner_result1_PLL2;
output [`SINGLE - 1:0] inner_result2_PLL2;
output [`SINGLE - 1:0] inner_result3_PLL2;

output [`SINGLE - 1:0] x_reg_PLL1;
output [`SINGLE - 1:0] x_reg_PLL2;
output [`SINGLE - 1:0] y_reg_PLL1;
output [`SINGLE - 1:0] y_reg_PLL2;

output [`SINGLE - 1:0] frequence;
output [`SINGLE - 1:0] theta;
/*
output [`SINGLE - 1:0] sin_theta;
output [`SINGLE - 1:0] cos_theta;
output [`SINGLE - 1:0] sin_theta_reg;
output [`SINGLE - 1:0] cos_theta_reg;
*/
output sig7,sig8;

output [`SINGLE - 1:0] pi_inv_2_minus_theta;
output [`SINGLE - 1:0] sin_cos_theta;
reg [`SINGLE - 1:0] sin_cos_theta;
output [`SINGLE - 1:0] sin_cos;
output [`SINGLE - 1:0] sin;
output [`SINGLE - 1:0] cos;
reg [`SINGLE - 1:0] sin;
reg [`SINGLE - 1:0] cos;
output [`SINGLE - 1:0] sin_reg;
output [`SINGLE - 1:0] cos_reg;

output sig9,sig10;
//reg [`SINGLE - 1:0] sin_theta_reg;
//reg [`SINGLE - 1:0] cos_theta_reg;

//output [`SINGLE - 1:0] multiplier_inner_result6_multiply_sin1;
//output [`SINGLE - 1:0] multiplier_inner_result6_multiply_sin2;
//output [`SINGLE - 1:0] multiplier_inner_result6_multiply_sin3;

//Mutiply 2
always@ (posedge clk or posedge rst) begin
	if(rst) begin
		inner_result_1 <= 1'b0;
	end
	else begin
		inner_result_1 <= {Va[`SINGLE - 1],Va[`SINGLE - 2:`SINGLE - 9] + 1'b1,Va[`SINGLE - 10:0]};
	end
end

//Vc + Vb
ADD	Adder_inner_result2(
								  .aclr(rst),
								  .clk_en(`ena_math),
								  .clock(clk),
								  .dataa(Vc),
								  .datab(Vb),
								  .result(inner_result_2)
								 );

//Vc - Vb
SUB	Substract_inner_result3(
										.aclr(rst),
										.clk_en(`ena_math),
										.clock(clk),
										.dataa(Vc),
										.datab(Vb),
										.result(inner_result_3)
									  );

//2Va - (Vc + Vb)
SUB	Substract_inner_result4(
										.aclr(rst),
										.clk_en(`ena_math),
										.clock(clk),
										.dataa(inner_result_1),
										.datab(inner_result_2),
										.result(inner_result_4)
									  );

//(2Va - (Vc + Vb))*3 || multiply cos

DELAY_1CLK  #(13) Delay_13clk_sig2(
										  	  .clk(clk),
											  .rst(rst),
											  .d(sta),
											  .q(sig2)
											 );

DELAY_1CLK  #(6) Delay_19clk_sig1(
											 .clk(clk),
											 .rst(rst),
											 .d(sig2),
											 .q(sig1)
										   );
									  									 
DELAY_1CLK  #(6) Delay_25clk_sig3(
											 .clk(clk),
											 .rst(rst),
											 .d(sig1),
											 .q(sig3)
										   );

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		multiplier_inner_result5_multiply_cos1 <= 1'b0;
	end
	else if(sig2) begin
		multiplier_inner_result5_multiply_cos1 <= const_inv_3;
	end
	else if(sig1) begin
		multiplier_inner_result5_multiply_cos1 <= multiplier_inner_result5_multiply_cos3;
	end
	else begin
		multiplier_inner_result5_multiply_cos1 <= multiplier_inner_result5_multiply_cos1;
	end
end

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		multiplier_inner_result5_multiply_cos2 <= 1'b0;	
	end
	else if(sig2) begin
		multiplier_inner_result5_multiply_cos2 <= inner_result_4;
	end
	else if(sig1) begin
		multiplier_inner_result5_multiply_cos2 <= cos_reg;
		//multiplier_inner_result5_multiply_cos2 <= 32'h40000000;
	end
	else begin
		multiplier_inner_result5_multiply_cos2 <= multiplier_inner_result5_multiply_cos2;
	end
end

MULT	Multiplier_inner_result5_multiply_cos(
														  .aclr(rst),
														  .clk_en(`ena_math),
														  .clock(clk),
														  .dataa(multiplier_inner_result5_multiply_cos1),
														  .datab(multiplier_inner_result5_multiply_cos2),
														  .result(multiplier_inner_result5_multiply_cos3)
														 );

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		inner_result_5 <= 1'b0;
		inner_result_6 <= 1'b0;
	end
	else if(sig1) begin
		inner_result_5 <= multiplier_inner_result5_multiply_cos3;
		inner_result_6 <= inner_result_6;
	end
	else if(sig3) begin
		inner_result_5 <= inner_result_5;
		inner_result_6 <= multiplier_inner_result5_multiply_cos3;
	end
	else begin
		inner_result_5 <= inner_result_5;
		inner_result_6 <= inner_result_6;
	end
end



DELAY_1CLK  #(6) Delay_6clk_sig5(
										   .clk(clk),
										   .rst(rst),
										   .d(sta),
										   .q(sig5)
										  );

DELAY_1CLK  #(6) Delay_12clk_sig4(
											 .clk(clk),
											 .rst(rst),
											 .d(sig5),
											 .q(sig4)
										   );
									  									 
DELAY_1CLK  #(6) Delay_18clk_sig6(
											 .clk(clk),
											 .rst(rst),
											 .d(sig4),
											 .q(sig6)
										   );

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		multiplier_inner_result7_multiply_sin1 <= 1'b0;
	end
	else if(sig5) begin
		multiplier_inner_result7_multiply_sin1 <= const_sqrt_inv_3;
	end
	else if(sig4) begin
		multiplier_inner_result7_multiply_sin1 <= multiplier_inner_result7_multiply_sin3;
	end
	else begin
		multiplier_inner_result7_multiply_sin1 <= multiplier_inner_result7_multiply_sin1;
	end
end

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		multiplier_inner_result7_multiply_sin2 <= 1'b0;	
	end
	else if(sig5) begin
		multiplier_inner_result7_multiply_sin2 <= inner_result_3;
	end
	else if(sig4) begin
		multiplier_inner_result7_multiply_sin2 <= sin_reg;
		//multiplier_inner_result7_multiply_sin2 <= 32'h40400000;
	end
	else begin
		multiplier_inner_result7_multiply_sin2 <= multiplier_inner_result7_multiply_sin2;
	end
end

MULT	Multiplier_inner_result7_multiply_sin(
														  .aclr(rst),
														  .clk_en(`ena_math),
														  .clock(clk),
														  .dataa(multiplier_inner_result7_multiply_sin1),
														  .datab(multiplier_inner_result7_multiply_sin2),
														  .result(multiplier_inner_result7_multiply_sin3)
														 );

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		inner_result_7 <= 1'b0;
		inner_result_8 <= 1'b0;
	end
	else if(sig4) begin
		inner_result_7 <= multiplier_inner_result7_multiply_sin3;
		inner_result_8 <= inner_result_8;
	end
	else if(sig6) begin
		inner_result_7 <= inner_result_7;
		inner_result_8 <= multiplier_inner_result7_multiply_sin3;
	end
	else begin
		inner_result_7 <= inner_result_7;
		inner_result_8 <= inner_result_8;
	end
end

SUB	Substract_inner_result9(
										.aclr(rst),
										.clk_en(`ena_math),
										.clock(clk),
										.dataa(inner_result_6),
										.datab(inner_result_8),
										.result(inner_result_9)
									  );

PI #(32'h3f800000 , 32'h40000000) PI_1(
													.clk(clk),
													.rst(rst),
													.sta(solve_end),
													.x(inner_result_9),
													.y(inner_result_10),
													.inner_result1(inner_result1_PLL1),
													.inner_result2(inner_result2_PLL1),
													.inner_result3(inner_result3_PLL1),
													.x_reg(x_reg_PLL1),
													.y_reg(y_reg_PLL1)
												  );
												  
MULT	Multiplier_frequence(
									.aclr(rst),
									.clk_en(`ena_math),
									.clock(clk),
									.dataa(inner_result_10),
									.datab(const_inv_2pi),
									.result(frequence)
								  );
		 
PI #(32'h40400000 , 32'h40800000) PI_2(
													.clk(clk),
													.rst(rst),
													.sta(solve_end),
													.x(inner_result_10),
													.y(theta),
													.inner_result1(inner_result1_PLL2),
													.inner_result2(inner_result2_PLL2),
													.inner_result3(inner_result3_PLL2),
													.x_reg(x_reg_PLL2),
													.y_reg(y_reg_PLL2)
												  );
												  
SUB	Substract_cos_theta(
								  .aclr(rst),
								  .clk_en(`ena_math),
								  .clock(clk),
								  .dataa(const_pi_inv_2),
								  .datab(theta),
								  .result(pi_inv_2_minus_theta)
								 );
								 
DELAY_1CLK  #(46) Delay_46clk_sig7(
											 .clk(clk),
											 .rst(rst),
											 .d(sig3),
											 .q(sig7)
										   );
											
DELAY_1CLK  #(7) Delay_53clk_sig8(
											 .clk(clk),
											 .rst(rst),
											 .d(sig7),
											 .q(sig8)
										   );

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		sin_cos_theta <= 1'b0;
	end
	else if(sig7) begin
		sin_cos_theta <= theta;
	end
	else if(sig8) begin
		sin_cos_theta <= pi_inv_2_minus_theta;
	end
	else begin
		sin_cos_theta <= sin_cos_theta;
	end
end

SIN	sin_theta_module(
							  .aclr(rst),
							  .clk_en(`ena_math),
							  .clock(clk),
							  .data(sin_cos_theta),
							  .result(sin_cos)
							 );
							 
DELAY_1CLK  #(31) Delay_31clk_sig9(
											 .clk(clk),
											 .rst(rst),
											 .d(sig8),
											 .q(sig9)
										   );
											
DELAY_1CLK  #(6) Delay_38clk_sig10(
											 .clk(clk),
											 .rst(rst),
											 .d(sig9),
											 .q(sig10)
										   );							

always@ (posedge clk or posedge rst) begin
	if(rst) begin
		sin <= 1'b0;
		cos <= 1'b0;
	end
	else if(sig9) begin
		sin <= sin_cos;
		cos <= cos;
	end
	else if(sig10) begin
		sin <= sin;
		cos <= sin_cos;
	end
	else begin
		sin <= sin;
		cos <= cos;
	end
end

/*
COS	cos_theta_module(
							  .aclr(rst),
							  .clk_en(`ena_math),
							  .clock(clk),
							  .data(theta),
							  .result(cos_theta)
							 );
*/

System_partition System_partition_cos_theta(
														  .clk(clk),
													     .rst(rst),
														  .solve_end(solve_end),
														  .cin(cos),
														  .cout(cos_reg)
														 );

System_partition System_partition_sin_theta(
														  .clk(clk),
													     .rst(rst),
														  .solve_end(solve_end),
														  .cin(sin),
														  .cout(sin_reg)
														 );
						
endmodule
